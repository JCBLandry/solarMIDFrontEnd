{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _assign = require('babel-runtime/core-js/object/assign');\n\nvar _assign2 = _interopRequireDefault(_assign);\n\nexports.default = function () {\n  var _size = [1, 1];\n  var actualSize = [0, 0];\n  var _nodeSize = false;\n  var _bands = false;\n  var _padding = [0, 0];\n\n  var _cols = void 0;\n\n  var _rows = void 0;\n\n  var nodes = void 0;\n  var count = void 0;\n  var result = null;\n\n  var _layout = function _layout() {\n    var i = -1;\n    var tmpCols = _cols || 0;\n    var tmpRows = _rows || 0;\n    var col = void 0;\n    var row = void 0;\n    var x = void 0;\n    var y = void 0; // FIXME: make explicit rows/cols exclusive? Or find a smart way to deal\n    // with overflows (repeat?)\n    // FIXME: when rows are set, fill top-to-bottom (make test with 5 data points and 4 rows)\n\n    if (tmpRows && !tmpCols) {\n      tmpCols = Math.ceil(count / tmpRows);\n    } else {\n      if (!tmpCols) tmpCols = Math.ceil(Math.sqrt(count));\n      if (!tmpRows) tmpRows = Math.ceil(count / tmpCols);\n    }\n\n    if (_nodeSize) {\n      x = (0, _d3Scale.scaleOrdinal)().domain((0, _d3Array.range)(tmpCols)).range((0, _d3Array.range)(0, (_size[0] + _padding[0]) * tmpCols, _size[0] + _padding[0]));\n      y = (0, _d3Scale.scaleOrdinal)().domain((0, _d3Array.range)(tmpRows)).range((0, _d3Array.range)(0, (_size[1] + _padding[1]) * tmpRows, _size[1] + _padding[1]));\n      actualSize[0] = _bands ? x(tmpCols - 1) + _size[0] : x(tmpCols - 1);\n      actualSize[1] = _bands ? y(tmpRows - 1) + _size[1] : y(tmpRows - 1);\n    } else if (_bands) {\n      x = (0, _d3Scale.scaleBand)().domain((0, _d3Array.range)(tmpCols)).range([0, _size[0]]).paddingInner(_padding[0]).paddingOuter(0);\n      y = (0, _d3Scale.scaleBand)().domain((0, _d3Array.range)(tmpRows)).range([0, _size[1]]).paddingInner(_padding[1]).paddingOuter(0);\n      actualSize[0] = x.bandwidth();\n      actualSize[1] = y.bandwidth();\n    } else {\n      x = (0, _d3Scale.scalePoint)().domain((0, _d3Array.range)(tmpCols)).range([0, _size[0]]);\n      y = (0, _d3Scale.scalePoint)().domain((0, _d3Array.range)(tmpRows)).range([0, _size[1]]);\n      actualSize[0] = x(1);\n      actualSize[1] = y(1);\n    }\n\n    var newLayout = [];\n\n    while (++i < count) {\n      col = i % tmpCols;\n      row = Math.floor(i / tmpCols);\n      newLayout.push((0, _assign2.default)({}, nodes[i], {\n        x: x(col),\n        y: y(row)\n      }));\n    }\n\n    _cols = tmpCols;\n    _rows = tmpRows;\n    return newLayout;\n  };\n\n  var grid = {\n    size: function size(value) {\n      if (!(0, _itsSet2.default)(value)) return _nodeSize ? actualSize : _size;\n      actualSize = [0, 0];\n      _nodeSize = (_size = value) == null;\n      return this;\n    },\n    nodeSize: function nodeSize(value) {\n      if (!(0, _itsSet2.default)(value)) return _nodeSize ? _size : actualSize;\n      actualSize = [0, 0];\n      _nodeSize = (_size = value) != null;\n      return this;\n    },\n    rows: function rows(value) {\n      if (!(0, _itsSet2.default)(value)) return _rows;\n      _rows = value;\n      return this;\n    },\n    cols: function cols(value) {\n      if (!(0, _itsSet2.default)(value)) return _cols;\n      _cols = value;\n      return this;\n    },\n    bands: function bands(value) {\n      if (!(0, _itsSet2.default)(value)) return _bands;\n      _bands = value;\n      return this;\n    },\n    padding: function padding(value) {\n      if (!(0, _itsSet2.default)(value)) return _padding;\n      _padding = value;\n      return this;\n    },\n    data: function data(value) {\n      if (!(0, _itsSet2.default)(value)) return nodes;\n      nodes = value;\n      count = nodes.length;\n      return this;\n    },\n    layout: function layout() {\n      result = _layout();\n      return this;\n    },\n    nodes: function nodes() {\n      return result;\n    }\n  };\n  return grid;\n};\n\nvar _d3Array = require('d3-array');\n\nvar _d3Scale = require('d3-scale');\n\nvar _itsSet = require('its-set');\n\nvar _itsSet2 = _interopRequireDefault(_itsSet);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}","map":{"version":3,"sources":["C:/Users/Justin/node_modules/d3-v4-grid/dist/d3-grid.js"],"names":["Object","defineProperty","exports","value","_assign","require","_assign2","_interopRequireDefault","default","_size","actualSize","_nodeSize","_bands","_padding","_cols","_rows","nodes","count","result","_layout","i","tmpCols","tmpRows","col","row","x","y","Math","ceil","sqrt","_d3Scale","scaleOrdinal","domain","_d3Array","range","scaleBand","paddingInner","paddingOuter","bandwidth","scalePoint","newLayout","floor","push","grid","size","_itsSet2","nodeSize","rows","cols","bands","padding","data","length","layout","_itsSet","obj","__esModule"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _assign = require('babel-runtime/core-js/object/assign');\n\nvar _assign2 = _interopRequireDefault(_assign);\n\nexports.default = function () {\n  var _size = [1, 1];\n  var actualSize = [0, 0];\n  var _nodeSize = false;\n  var _bands = false;\n  var _padding = [0, 0];\n  var _cols = void 0;\n  var _rows = void 0;\n  var nodes = void 0;\n  var count = void 0;\n  var result = null;\n\n  var _layout = function _layout() {\n    var i = -1;\n    var tmpCols = _cols || 0;\n    var tmpRows = _rows || 0;\n    var col = void 0;\n    var row = void 0;\n    var x = void 0;\n    var y = void 0;\n\n    // FIXME: make explicit rows/cols exclusive? Or find a smart way to deal\n    // with overflows (repeat?)\n    // FIXME: when rows are set, fill top-to-bottom (make test with 5 data points and 4 rows)\n\n    if (tmpRows && !tmpCols) {\n      tmpCols = Math.ceil(count / tmpRows);\n    } else {\n      if (!tmpCols) tmpCols = Math.ceil(Math.sqrt(count));\n      if (!tmpRows) tmpRows = Math.ceil(count / tmpCols);\n    }\n\n    if (_nodeSize) {\n      x = (0, _d3Scale.scaleOrdinal)().domain((0, _d3Array.range)(tmpCols)).range((0, _d3Array.range)(0, (_size[0] + _padding[0]) * tmpCols, _size[0] + _padding[0]));\n\n      y = (0, _d3Scale.scaleOrdinal)().domain((0, _d3Array.range)(tmpRows)).range((0, _d3Array.range)(0, (_size[1] + _padding[1]) * tmpRows, _size[1] + _padding[1]));\n\n      actualSize[0] = _bands ? x(tmpCols - 1) + _size[0] : x(tmpCols - 1);\n      actualSize[1] = _bands ? y(tmpRows - 1) + _size[1] : y(tmpRows - 1);\n    } else if (_bands) {\n      x = (0, _d3Scale.scaleBand)().domain((0, _d3Array.range)(tmpCols)).range([0, _size[0]]).paddingInner(_padding[0]).paddingOuter(0);\n\n      y = (0, _d3Scale.scaleBand)().domain((0, _d3Array.range)(tmpRows)).range([0, _size[1]]).paddingInner(_padding[1]).paddingOuter(0);\n\n      actualSize[0] = x.bandwidth();\n      actualSize[1] = y.bandwidth();\n    } else {\n      x = (0, _d3Scale.scalePoint)().domain((0, _d3Array.range)(tmpCols)).range([0, _size[0]]);\n\n      y = (0, _d3Scale.scalePoint)().domain((0, _d3Array.range)(tmpRows)).range([0, _size[1]]);\n\n      actualSize[0] = x(1);\n      actualSize[1] = y(1);\n    }\n\n    var newLayout = [];\n\n    while (++i < count) {\n      col = i % tmpCols;\n      row = Math.floor(i / tmpCols);\n      newLayout.push((0, _assign2.default)({}, nodes[i], { x: x(col), y: y(row) }));\n    }\n\n    _cols = tmpCols;\n    _rows = tmpRows;\n\n    return newLayout;\n  };\n\n  var grid = {\n    size: function size(value) {\n      if (!(0, _itsSet2.default)(value)) return _nodeSize ? actualSize : _size;\n      actualSize = [0, 0];\n      _nodeSize = (_size = value) == null;\n      return this;\n    },\n    nodeSize: function nodeSize(value) {\n      if (!(0, _itsSet2.default)(value)) return _nodeSize ? _size : actualSize;\n      actualSize = [0, 0];\n      _nodeSize = (_size = value) != null;\n      return this;\n    },\n    rows: function rows(value) {\n      if (!(0, _itsSet2.default)(value)) return _rows;\n      _rows = value;\n      return this;\n    },\n    cols: function cols(value) {\n      if (!(0, _itsSet2.default)(value)) return _cols;\n      _cols = value;\n      return this;\n    },\n    bands: function bands(value) {\n      if (!(0, _itsSet2.default)(value)) return _bands;\n      _bands = value;\n      return this;\n    },\n    padding: function padding(value) {\n      if (!(0, _itsSet2.default)(value)) return _padding;\n      _padding = value;\n      return this;\n    },\n    data: function data(value) {\n      if (!(0, _itsSet2.default)(value)) return nodes;\n      nodes = value;\n      count = nodes.length;\n      return this;\n    },\n    layout: function layout() {\n      result = _layout();\n      return this;\n    },\n    nodes: function nodes() {\n      return result;\n    }\n  };\n\n  return grid;\n};\n\nvar _d3Array = require('d3-array');\n\nvar _d3Scale = require('d3-scale');\n\nvar _itsSet = require('its-set');\n\nvar _itsSet2 = _interopRequireDefault(_itsSet);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }"]},"metadata":{},"sourceType":"script"}